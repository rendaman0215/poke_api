// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: dex/v1/dex_image.proto

package dexv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/rendaman0215/poke_api/schema/gen/go/dex/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DexImageServiceName is the fully-qualified name of the DexImageService service.
	DexImageServiceName = "dex.v1.DexImageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DexImageServiceGetImageProcedure is the fully-qualified name of the DexImageService's GetImage
	// RPC.
	DexImageServiceGetImageProcedure = "/dex.v1.DexImageService/GetImage"
)

// DexImageServiceClient is a client for the dex.v1.DexImageService service.
type DexImageServiceClient interface {
	// Get image
	GetImage(context.Context, *connect.Request[v1.GetImageRequest]) (*connect.Response[v1.GetImageResponse], error)
}

// NewDexImageServiceClient constructs a client for the dex.v1.DexImageService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDexImageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DexImageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	dexImageServiceMethods := v1.File_dex_v1_dex_image_proto.Services().ByName("DexImageService").Methods()
	return &dexImageServiceClient{
		getImage: connect.NewClient[v1.GetImageRequest, v1.GetImageResponse](
			httpClient,
			baseURL+DexImageServiceGetImageProcedure,
			connect.WithSchema(dexImageServiceMethods.ByName("GetImage")),
			connect.WithClientOptions(opts...),
		),
	}
}

// dexImageServiceClient implements DexImageServiceClient.
type dexImageServiceClient struct {
	getImage *connect.Client[v1.GetImageRequest, v1.GetImageResponse]
}

// GetImage calls dex.v1.DexImageService.GetImage.
func (c *dexImageServiceClient) GetImage(ctx context.Context, req *connect.Request[v1.GetImageRequest]) (*connect.Response[v1.GetImageResponse], error) {
	return c.getImage.CallUnary(ctx, req)
}

// DexImageServiceHandler is an implementation of the dex.v1.DexImageService service.
type DexImageServiceHandler interface {
	// Get image
	GetImage(context.Context, *connect.Request[v1.GetImageRequest]) (*connect.Response[v1.GetImageResponse], error)
}

// NewDexImageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDexImageServiceHandler(svc DexImageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dexImageServiceMethods := v1.File_dex_v1_dex_image_proto.Services().ByName("DexImageService").Methods()
	dexImageServiceGetImageHandler := connect.NewUnaryHandler(
		DexImageServiceGetImageProcedure,
		svc.GetImage,
		connect.WithSchema(dexImageServiceMethods.ByName("GetImage")),
		connect.WithHandlerOptions(opts...),
	)
	return "/dex.v1.DexImageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DexImageServiceGetImageProcedure:
			dexImageServiceGetImageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDexImageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDexImageServiceHandler struct{}

func (UnimplementedDexImageServiceHandler) GetImage(context.Context, *connect.Request[v1.GetImageRequest]) (*connect.Response[v1.GetImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dex.v1.DexImageService.GetImage is not implemented"))
}
