// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: dex/v1/dex_image.proto

package dexv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DexImageService_GetImage_FullMethodName = "/dex.v1.DexImageService/GetImage"
)

// DexImageServiceClient is the client API for DexImageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DexImageServiceClient interface {
	// Get image
	GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*GetImageResponse, error)
}

type dexImageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDexImageServiceClient(cc grpc.ClientConnInterface) DexImageServiceClient {
	return &dexImageServiceClient{cc}
}

func (c *dexImageServiceClient) GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*GetImageResponse, error) {
	out := new(GetImageResponse)
	err := c.cc.Invoke(ctx, DexImageService_GetImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DexImageServiceServer is the server API for DexImageService service.
// All implementations must embed UnimplementedDexImageServiceServer
// for forward compatibility
type DexImageServiceServer interface {
	// Get image
	GetImage(context.Context, *GetImageRequest) (*GetImageResponse, error)
	mustEmbedUnimplementedDexImageServiceServer()
}

// UnimplementedDexImageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDexImageServiceServer struct {
}

func (UnimplementedDexImageServiceServer) GetImage(context.Context, *GetImageRequest) (*GetImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (UnimplementedDexImageServiceServer) mustEmbedUnimplementedDexImageServiceServer() {}

// UnsafeDexImageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DexImageServiceServer will
// result in compilation errors.
type UnsafeDexImageServiceServer interface {
	mustEmbedUnimplementedDexImageServiceServer()
}

func RegisterDexImageServiceServer(s grpc.ServiceRegistrar, srv DexImageServiceServer) {
	s.RegisterService(&DexImageService_ServiceDesc, srv)
}

func _DexImageService_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DexImageServiceServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DexImageService_GetImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DexImageServiceServer).GetImage(ctx, req.(*GetImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DexImageService_ServiceDesc is the grpc.ServiceDesc for DexImageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DexImageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dex.v1.DexImageService",
	HandlerType: (*DexImageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetImage",
			Handler:    _DexImageService_GetImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dex/v1/dex_image.proto",
}
