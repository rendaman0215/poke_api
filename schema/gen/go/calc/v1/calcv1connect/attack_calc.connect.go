// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: calc/v1/attack_calc.proto

package calcv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/rendaman0215/poke_api/schema/gen/go/calc/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DamageCalcServiceName is the fully-qualified name of the DamageCalcService service.
	DamageCalcServiceName = "calc.v1.DamageCalcService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DamageCalcServiceDamageCalcProcedure is the fully-qualified name of the DamageCalcService's
	// DamageCalc RPC.
	DamageCalcServiceDamageCalcProcedure = "/calc.v1.DamageCalcService/DamageCalc"
)

// DamageCalcServiceClient is a client for the calc.v1.DamageCalcService service.
type DamageCalcServiceClient interface {
	// ダメージ計算
	DamageCalc(context.Context, *connect.Request[v1.DamageCalcRequest]) (*connect.Response[v1.DamageCalcResponse], error)
}

// NewDamageCalcServiceClient constructs a client for the calc.v1.DamageCalcService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDamageCalcServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DamageCalcServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	damageCalcServiceMethods := v1.File_calc_v1_attack_calc_proto.Services().ByName("DamageCalcService").Methods()
	return &damageCalcServiceClient{
		damageCalc: connect.NewClient[v1.DamageCalcRequest, v1.DamageCalcResponse](
			httpClient,
			baseURL+DamageCalcServiceDamageCalcProcedure,
			connect.WithSchema(damageCalcServiceMethods.ByName("DamageCalc")),
			connect.WithClientOptions(opts...),
		),
	}
}

// damageCalcServiceClient implements DamageCalcServiceClient.
type damageCalcServiceClient struct {
	damageCalc *connect.Client[v1.DamageCalcRequest, v1.DamageCalcResponse]
}

// DamageCalc calls calc.v1.DamageCalcService.DamageCalc.
func (c *damageCalcServiceClient) DamageCalc(ctx context.Context, req *connect.Request[v1.DamageCalcRequest]) (*connect.Response[v1.DamageCalcResponse], error) {
	return c.damageCalc.CallUnary(ctx, req)
}

// DamageCalcServiceHandler is an implementation of the calc.v1.DamageCalcService service.
type DamageCalcServiceHandler interface {
	// ダメージ計算
	DamageCalc(context.Context, *connect.Request[v1.DamageCalcRequest]) (*connect.Response[v1.DamageCalcResponse], error)
}

// NewDamageCalcServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDamageCalcServiceHandler(svc DamageCalcServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	damageCalcServiceMethods := v1.File_calc_v1_attack_calc_proto.Services().ByName("DamageCalcService").Methods()
	damageCalcServiceDamageCalcHandler := connect.NewUnaryHandler(
		DamageCalcServiceDamageCalcProcedure,
		svc.DamageCalc,
		connect.WithSchema(damageCalcServiceMethods.ByName("DamageCalc")),
		connect.WithHandlerOptions(opts...),
	)
	return "/calc.v1.DamageCalcService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DamageCalcServiceDamageCalcProcedure:
			damageCalcServiceDamageCalcHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDamageCalcServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDamageCalcServiceHandler struct{}

func (UnimplementedDamageCalcServiceHandler) DamageCalc(context.Context, *connect.Request[v1.DamageCalcRequest]) (*connect.Response[v1.DamageCalcResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("calc.v1.DamageCalcService.DamageCalc is not implemented"))
}
